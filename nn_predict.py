import mlpnet as mlp
import numpy as np

net = mlp.MLPNetwork(
    ndim=[6, 33, 1],
    act_funcs=['tanh', 'linear'],
    name='MIP 2',
    cost_function='mse'
)

weights_trained = np.array([
    -5.126093708, 0.003394101, -4.521405884, -1.037430576, -7.199682518,
    -2.494974321, 1.332690746, 2.788352246, 0.527651701, -0.877467532,
    -1.977059199, 7.102171101, -0.627181713, 1.004177340, -0.026322541,
    -0.156789771, -2.205629623, -0.449857630, -1.882980959, -0.582633795,
    1.058847815, -10.259100562, 23.017649388, -4.574864659, -1.972648683,
    14.907901770, 2.108629615, -3.339425826, -36.520692200, -1.460802503,
    -8.261577330, 5.239322753, -29.677565728, -7.077646069, 8.747718960,
    1.620523154, 1.008476306, -0.459945299, -2.072335521, 3.882686766,
    -2.434395512, 0.155383466, -1.557063692, -0.135938598, 7.376079588,
    1.977222762, 6.501741412, 2.947034102, -3.553401725, 2.165469202,
    0.068820937, 1.264580756, -0.008009450, 3.922928983, 0.930412669,
    -0.469291879, -3.085093950, -0.031020677, -20.618471577, -6.405527013,
    -18.028988036, -10.412932564, 11.755065656, 0.076325515, -33.803974144,
    10.811005679, -5.855081327, -15.279931941, -25.898177501, 8.404819234,
    -1.192268525, -47.764244969, -0.861557887, 1.568772432, -9.833995327,
    -12.094131172, 5.965867359, 21.049394410, 1.352434338, 5.983762589,
    18.813987994, 10.310853293, 20.337127048, -5.509843783, 30.867463328,
    -4.709946275, -15.410812796, -23.660016987, -21.733417828, -20.671610220,
    3.924566771, -9.502634533, 24.108115529, -3.571531660, -16.826051101,
    5.421220268, 16.197237411, -15.185440724, 1.044153007, 11.309161030,
    -0.435498035, -5.867173986, 8.757358912, -0.420999280, -3.211447599,
    1.901226667, 57.613585631, -4.845775019, 9.727876919, 41.007645742,
    10.425954563, -24.965271978, 2.128696977, 63.019140665, -3.660180872,
    11.251828152, 46.401163096, 12.154168750, -28.270599100, -0.025113461,
    -0.023215532, 18.888877654, 1.778950933, 17.081719744, 2.569128168,
    -8.701865500, -0.219766032, -0.913330939, -27.929671881, -0.316867516,
    -25.282099524, -0.732352979, 13.450659009, -0.636698425, -0.990198694,
    -0.452801699, 1.377355485, -4.053525890, 1.575754941, 0.317839922,
    -1.047399108, -11.102754676, 1.552399989, 5.964503278, -7.120100941,
    0.833009009, 2.484344761, -0.218539727, -0.147456596, 10.268828543,
    2.659415787, 8.833100455, 3.966117895, -5.052659417, 0.162179527,
    -0.029263271, -1.479125098, -0.434151135, 5.113156218, 0.086446068,
    0.796491507, 7.265372298, 5.156707432, -26.361562385, 1.229491976,
    -32.232239499, -0.758561019, 2.321786341, -9.287711230, 23.740531698,
    -6.323078424, -17.208029189, 2.657634486, 14.694653082, -13.552744017,
    -1.229824607, -54.212099016, 3.227196476, 7.930615195, -30.312574847,
    -14.734715387, 17.800296735, 0.333593023, -0.614719075, 6.727051109,
    1.011224367, 13.760013506, 2.310506733, -2.993841852, -0.075187549,
    32.863345187, -5.750341696, 7.101682455, 19.595693524, 27.532080989,
    -10.493025572, 1.662306966, -0.097977220, -0.687174104, 0.194947001,
    -3.341122632, -0.544602528, 0.246209214, -1.417266571, -44.150759840,
    1.692848566, 4.259165615, -7.504216207, -8.067387605, 4.547226126,
    0.012073332, -0.106598396, -1.782853211, -0.446157838, 1.129203224,
    0.186007450, 0.896226219, -1.736570048, 0.082466680, -7.147063662,
    -1.793784346, -6.132370906, -2.642233875, 3.376304851, -3.213734700,
    0.061735836, 1.992155294, 0.427833161, 3.696810529, 1.220398398,
    -0.861727331, 14.230486070, -39.467604050, 18.534710328, -149.736027542,
    1.612698281, -12.155150370, 32.202886509, 101.685973751, 66.862974246,
    -18.253299552, 44.576410068, -15.531710832, 15.999750940, -10.172563109,
    45.032432160, -70.803333138, -88.366442679, 86.436383018, 77.794482859,
    -57.708289943, 46.779489684, -72.795316652, 62.353238401, 86.281806109,
    -10.284834599, -45.268802796, 2.687304551, -37.572742304, 47.020201754,
    -76.307926484, 15.728764448, 106.582215903, -105.988900311, 87.985628385
])

net.set_weights(weights_trained)

net.mu = np.array([
    0.086023, -0.00893972, -0.0017736,
    0.00303927, 0.00136735, -0.02285414
])

net.sigma = np.array([
    1.88280060e+02, 2.81979086e-01, 2.19887418e-01,
    1.85485896e-01, 2.27503013e-01, 5.37595099e-01
])

def next_tau(tau, θw, θw_dot, θr, θr_dot, xr_sp):

    x = tau, θw, θw_dot, θr, θr_dot, xr_sp
    x_norm = (x - net.mu)/net.sigma

    tau_p1 = net.predict(x)[0,0]

    return tau_p1