import mlpnet as mlp
import numpy as np

net = mlp.MLPNetwork(
    ndim=[6, 33, 1],
    act_funcs=['tanh', 'linear'],
    name='MIP 1',
    cost_function='mse'
)

weights_trained = np.array([
    -4.656839070, -0.254620576, -0.761674971, -0.462683813, -3.317319216,
    -0.926223247, -0.370072891, 3.208997907, -0.557741087, -0.111405038,
    -2.637604908, 8.142421231, -1.174807720, -0.322433251, -0.000850246,
    -0.172991127, -2.258973162, -0.411296758, -1.961424647, -0.607902411,
    1.066802648, -7.102177308, 23.376168329, -3.324426516, 0.439511990,
    14.913276008, 2.699516297, -2.237713634, -34.602412501, -1.062405789,
    -6.095221617, 7.612984497, -28.846080778, -5.578819138, 8.429400742,
    3.245892539, 2.377315145, -6.947058840, -3.827963223, -1.030033438,
    -3.879951700, 0.381213494, -1.555700605, -0.188240482, 7.619838203,
    1.968876078, 6.219731899, 2.968772796, -3.965020932, 2.145751222,
    0.160486654, 1.235609763, 0.630190077, 3.979368955, 1.458896114,
    -0.417797813, -3.114425226, 0.808279979, -21.295028399, -5.265312386,
    -20.277697133, -9.528503553, 12.867225631, -0.039256689, -36.482169041,
    14.550563331, -1.323816485, -11.696244285, -23.006672605, 8.193261753,
    -0.199171024, -48.662402171, 0.805202798, 0.946179887, -7.270110410,
    -11.928502476, 3.420508989, 16.626501528, 0.836982789, 8.055884080,
    15.012117873, 11.520246637, 16.588258892, -4.585303306, 28.607039230,
    -4.701392831, -20.737955866, -17.337353605, -23.521648804, -15.485074433,
    2.880456879, -9.003973599, 21.948483614, -1.795648851, -13.742912925,
    6.469771458, 16.041518413, -14.309980770, 1.016389489, 8.098603912,
    1.482937254, -4.062161654, 7.219540356, 0.388729024, -2.414678781,
    1.467783963, 63.431740776, -12.321055593, 9.733689306, 32.101497775,
    9.569067249, -23.272016128, 1.548675040, 64.135938587, -3.714750677,
    11.444927625, 41.250471784, 12.393567588, -28.131012316, 0.055037599,
    0.069615585, 10.346650682, 0.962848296, 8.997314646, 1.459425581,
    -5.167050112, -0.186261598, -0.462538563, -32.479534036, -1.497277176,
    -28.958133762, -2.257397699, 16.157020900, -1.362353553, -1.115643802,
    2.820495964, 1.703021130, 0.388154308, 1.631919497, -0.122170148,
    -1.004861074, -8.694935748, 1.866046204, 4.594898572, -3.738824644,
    0.449269177, 0.742327133, 0.042974331, -0.026771662, 6.822410205,
    2.307275762, 4.343053547, 3.236281937, -3.804789581, 0.062235663,
    0.029710649, -0.799994184, -0.109386463, 4.599992779, 0.249572485,
    0.697237881, 7.481999208, 2.930204191, -20.958678027, 3.108882649,
    -29.853649147, -0.653261750, -1.078611068, -9.465691428, 23.743395111,
    -9.192138395, -16.064218702, -0.364238200, 14.177263515, -11.378331306,
    0.554341493, -54.146969570, 4.836060488, 7.458843010, -30.866662412,
    -14.209319753, 16.011070722, 0.043324444, 0.093672582, 4.977741088,
    0.908268048, 11.863896890, 1.696242703, -1.920332014, 0.055460305,
    32.724270641, -5.567468208, 3.444196419, 17.747203376, 24.391682518,
    -11.036128608, 2.167744365, -0.094266739, -0.316908382, -0.042509746,
    -3.959331295, -0.988807127, 0.328375898, -0.270675558, -41.425300037,
    -0.280083985, 2.749383423, -8.675345514, -7.409754940, 3.462172638,
    -0.032760555, -0.040058290, -2.790666336, -0.572738647, 0.764695143,
    0.068649031, 1.381768883, -1.507128197, 0.139600887, -6.112807271,
    -1.409244757, -4.939461675, -1.983347045, 2.935042818, -3.527131150,
    0.032353417, 1.176734190, 0.760080729, 3.488494067, 1.677164405,
    -0.970760677, -20.110963922, -54.015884161, 20.178485580, -137.698754003,
    1.614069014, -16.979366360, 32.815992401, 96.410901735, 67.880372283,
    -21.972254521, 44.196450631, -12.383979653, 32.558566667, -20.994634312,
    45.283410941, -71.580418761, -90.560323398, 89.292577587, 94.549109372,
    -69.207471326, 43.852410780, -71.994413212, 56.371839888, 101.405932706,
    -8.343310053, -44.926328612, 2.164758730, -41.654895843, 47.762714881,
    -67.052768821, 12.657006387, 100.684879893, -92.960266656, 84.708133487
])

net.set_weights(weights_trained)

net.mu = np.array([
    -3.90868121e-01, -1.12114993e-03,  3.53509061e-03,
    9.22887874e-05, -2.32317645e-03, -1.11822600e-02
])

net.sigma = np.array([
    1.90536487e+02, 2.73651639e-01, 2.13880240e-01,
    1.77539564e-01, 2.20567957e-01, 5.51687743e-01
])

def next_tau(tau, θw, θw_dot, θr, θr_dot, xr_sp):

    x = tau, θw, θw_dot, θr, θr_dot, xr_sp
    x_norm = (x - net.mu)/net.sigma

    tau_p1 = net.predict(x)[0,0]

    return tau_p1